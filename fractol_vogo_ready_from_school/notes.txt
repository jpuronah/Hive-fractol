ToDo:

- Check everything again
- julia mouse boundaries

 	float			z_imaginary;
	//float			z_imaginary;
	float			z_real;
	//float			z_real;

- Tee juttu etta paivittaa kuvan, kun zoomaa juliaa

- Colors Funktio jotenki jiiriin

- Tee semmone etta jos liia isoja valueita nii ei seg faulttaa vaa resettaa arvot mielummi

- -c=current pixel coordinate, vaihda variable nimet (KAIKKI OIKEESTAAN
  Vaihtoon:
	float				z_imaginary;
	float				z_real;

- TEE RESET NAPPULA ETTEI KUVA KATOO IHAN VITTUUN 
	TAI SITTE BOUNDARIES ETTEI LIIKU LIIA KAUAS

- juliassa kato: max -, vai: min +
- sekä lisätäänkö liikkumista näppäimillä

- !?!? Should I use images, since it is another 
	extra malloc for 'nothing'
	- risk for seg fault etc.
	 -> probably not if any doubt

Check:
- if exit_fdf in controls is OK malloc and memory - wise
- 

At school:
- mtissari filler Makefile recompile thingy
	- re compile if a change in file with only 'make' (no make re needed)
- keyboard and mouse events according to library
- Makefile mlx includes

WHatsapppist::
-*******				***************				***************				***************				********
-von koch snowflake 1,262 dimensional, sierpinski triangle 1,585 dimensional, 
-c=current pixel coordinate,
-mustat ei diverge(räjähdä äärettömyyteen), muut väritetty sen mukaan kuinka nopee räjähtää,
 because coordinates are floats, we can zoom endlessly??!??
-muuta floatit long long floateiks nii saa enemmä precisioo???
-sen pitäs tavallaa laskee ne pienetki erot mulle ittestää, ku zoomaa koska siel arvot vaan vaihtelee vähemmän
*******				***************				***************				***************				********













REST of them:
*******				***************				***************				***************				********

***DONE		- Get libft from ft_printf vogo

Need to get done:

- RECODE:
***DONE	- calculus functions
***DONE -ish			- Colors, maybe clerp or something, so that its cleaner

- TRYOUT:
***DONE	((((- floats to long long))))  --- Ei oikee mitää eroo
)
complex & imaginary numbers:
 - i^2 = −1 or j^2 = −1, beacause reasons (something to do with e ^ (pi / 2)

*******				***************				***************				***************				********
*******				***************				***************				***************				********
*******				***************				***************				***************				********








for each pixel (Px, Py) on the screen do
    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))
    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))
    x := 0.0
    y := 0.0
    iteration := 0
    max_iteration := 1000
    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do
        xtemp := x*x - y*y + x0
        y := 2*x*y + y0
        x := xtemp
        iteration := iteration + 1
    
    color := palette[iteration]
    plot(Px, Py, color)


	R = escape radius  # choose R > 0 such that R**2 - R >= sqrt(cx**2 + cy**2)

for each pixel (x, y) on the screen, do:   
    zx = scaled x coordinate of pixel # (scale to be between -R and R)
    zy = scaled y coordinate of pixel # (scale to be between -R and R)
	x := 0.0
    y := 0.0
    iteration = 0
    max_iteration = 1000
    while (zx * zx + zy * zy < R**2  AND  iteration < max_iteration) 
    {
        xtemp = zx * zx - zy * zy
        zy = 2 * zx * zy  + cy 
        zx = xtemp + cx
    
        iteration = iteration + 1 
    }
  
    if (iteration == max_iteration)
        return black;
    else
        return iteration;
}